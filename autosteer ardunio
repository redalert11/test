//The 3.3v version
//#include "MMA8452Q.h"

//It says 1015 but is used for both the ADS1015 and the ADS1115
//#include "ADS1015.h"

//For I2C communication
#include <Wire.h>

//##########################################################################################################
//### Setup Zone ###########################################################################################
//##########################################################################################################

  //Change depending on what happens. If the word is false use a 0, if its true use a 1
  //Only change from 0 if the response is incorrect. Start with all four set to 0.

                                            //Steering to the right should be a positive angle
  #define SteeringRightIsNotPositive 0      // Set to 0 if it steers the right way    
                                            // Set to 1 if steer to right shows negative

                                            // Does the motor spin the right way?
  #define SteerMotorDirectionBackwards 0    // Set to 0 if is correct direction
                                            // Set to 1 if it turns the wrong way
                                    
                                        // Depending on board orientation, choose the right Axis
  #define UseMMA_Y_Axis 0               // Set to 0 to use X axis of MMA
                                        // Set to 1 to use Y axis of MMA

                                        // When tractor rolls to the right, it should show positive angle
  #define IsRollToRightNotPositive 0    // Set to 0 if angle is positive
                                        // Set to 1 if roll to right shows negative
  
                                        //using the dogs or not
  #define IsUsingDogs2 1                //set to 0 if using MMA
                                        //set to 1 if using DOGS2
                                  
  //##########################################################################################################
  //### End of Setup Zone ####################################################################################
  //##########################################################################################################

  int WAS_Raw = A3; // WAS input set to A5
  int WAS_Signal = 0;  // declaring and setting initi value to 0
  
  #define DIR_PIN  4  //PD4
  #define PWM_PIN  3  //PD3  
  
  #define WORKSW_PIN 7  //PD7
  #define STEERSW_PIN 6 //PD6
  #define REMOTE_PIN 8  //PB0
  
  //ethercard 10,11,12,13   

  //mpu6050 variables
  double accelX,accelY,accelZ,temperature,gyroX,gyroY,gyroZ,gyro_x_cal,gyro_y_cal,gyro_z_cal; //These will be the raw data from the MPU6050.
  uint32_t timer; //it's a timer, saved as a big-ass unsigned int.  We use it to save times from the "micros()" command and subtract the present time in microseconds from the time stored in timer to calculate the time for each loop.
  double roll, pitch ,yaw; //These are the angles in the complementary filter
  float rollangle,pitchangle;
  int cal_int;

  //loop time variables in microseconds
  const unsigned int LOOP_TIME = 100; //10hz
  unsigned int lastTime = LOOP_TIME;
  unsigned int currentTime = LOOP_TIME;
  unsigned int dT = 50000;
  unsigned int count = 0;
  byte watchdogTimer = 0;
  byte serialResetTimer = 0; //if serial buffer is getting full, empty it

  //Kalman variables
  float rollK = 0, Pc = 0.0, G = 0.0, P = 1.0, Xp = 0.0, Zp = 0.0;
  float XeRoll = 0;
  const float varRoll = 0.5; // variance,
  const float varProcess = 0.001; //smaller is more filtering

   //program flow
  float rollDogs = 0;
  bool isDataFound = false, isSettingFound = false;
  int header = 0, tempHeader = 0, temp;

  byte relay = 0, uTurn = 0, gpsSpeed = 0, remoteSwitch = 0, workSwitch = 0, steerSwitch = 1, switchByte = 0;
  float distanceFromLine = 0, corr = 0;

  //steering variables
  float steerAngleActual = 0;
  float steerAngleSetPoint = 0; //the desired angle from AgOpen
  long steeringPosition = 0;
  int steeringPositionZero = 1660; //from steering sensor
  float steerAngleError = 0; //setpoint - actual
  float distanceError = 0; //
  float steerSensorCounts = 32;

  //pwm variables
  int pwmDrive = 0, pwmDisplay = 0;
  float pValue = 0, iValue = 0, dValue = 0;
  byte minPWMValue = 10;

  //PID variables
  float Ko = 0.0f;  //overall gain
  float Kp = 0.0f;  //proportional gain
  float Ki = 0.0f;//integral gain
  float Kd = 0.0f;  //derivative gain
  
  //integral values - **** change as required *****
  float   maxIntErr = 200; //anti windup max
  float maxIntegralValue = 20; //max PWM value for integral PID component

void setup()
{
  //keep pulled high and drag low to activate, noise free safe    
  pinMode(WORKSW_PIN, INPUT_PULLUP); 
  pinMode(STEERSW_PIN, INPUT_PULLUP); 
	pinMode(REMOTE_PIN, INPUT_PULLUP); 
	pinMode(DIR_PIN, OUTPUT); //D4 PD4
  pinMode(5, OUTPUT); // sets left/right relay to be an output
  pinMode(9, OUTPUT); // sets left/right relay to be an output
	//set up communication
	Wire.begin();
	Serial.begin(38400);
  //mpu6050 setup
  setupMPU(); 
  Serial.println("Calibrating Gyroscope......");
  for(cal_int=1;cal_int<=2000;cal_int++)
  { 
   recordRegisters();
   gyro_x_cal += gyroX;
   gyro_y_cal  += gyroY ;
   gyro_z_cal += gyroZ;
  }
  Serial.println("Calibration Done..!!!");
  gyro_x_cal /= 2000;
  gyro_y_cal /= 2000;
  gyro_z_cal /= 2000;
  
  //start a timer
  timer = micros();
}

void loop()
{
  //Loop triggers every 100 msec and sends back gyro heading, and roll, steer angle etc

  //runs mpu6050_loop
  //Collect raw data from the sensor.
  recordRegisters();
  gyroX = gyroX / 65.5;
  gyroY = gyroY / 65.5;
  gyroZ = gyroZ / 65.5;

  accelX = accelX / 4096.0;
  accelY = accelY / 4096.0; 
  accelZ= accelZ / 4096.0;
  
  double dt = (double)(micros() - timer) / 1000000; //This line does three things: 1) stops the timer, 2)converts the timer's output to seconds from microseconds, 3)casts the value as a double saved to "dt".
  timer = micros(); //start the timer again so that we can calculate the next dt.

  //the next two lines calculate the orientation of the accelerometer relative to the earth and convert the output of atan2 from radians to degrees
  //We will use this data to correct any cumulative errors in the orientation that the gyroscope develops.
  rollangle=atan2(accelY,accelZ)*180/PI; // FORMULA FOUND ON INTERNET
  pitchangle=atan2(accelX,sqrt(accelY*accelY+accelZ*accelZ))*180/PI; //FORMULA FOUND ON INTERNET

  
  

  //THE COMPLEMENTARY FILTER
  //This filter calculates the angle based MOSTLY on integrating the angular velocity to an angular displacement.
  //dt, recall, is the time between gathering data from the MPU6050.  We'll pretend that the 
  //angular velocity has remained constant over the time dt, and multiply angular velocity by 
  //time to get displacement.
  //The filter then adds a small correcting factor from the accelerometer ("roll" or "pitch"), so the gyroscope knows which way is down. 
  roll = 0.99 * (roll+ gyroX * dt) + 0.01 * rollangle; // Calculate the angle using a Complimentary filter
  pitch = 0.99 * (pitch + gyroY * dt) + 0.01 * pitchangle; 
  yaw=gyroZ;
  
  
  //Serial.print("roll  ");
  //Serial.print(roll);
  //Serial.print("   pitch  ");
  //Serial.print(pitch);
  //Serial.print("   yaw    ");
  //Serial.println(yaw);


	currentTime = millis();
	unsigned int time = currentTime;

	if (currentTime - lastTime >= LOOP_TIME)
	{
		dT = currentTime - lastTime;
		lastTime = currentTime;

		//If connection lost to AgOpenGPS, the watchdog will count up and turn off steering
		if (watchdogTimer++ > 250) watchdogTimer = 12;

		//clean out serial buffer to prevent buffer overflow
		if (serialResetTimer++ > 20)
		{
			while (Serial.available() > 0) char t = Serial.read();
			serialResetTimer = 0;
		}

    //read all the switches
    workSwitch = digitalRead(WORKSW_PIN);  // read work switch
    steerSwitch = 0; //digitalRead(STEERSW_PIN); //read auto steer enable switch open = 0n closed = Off
    remoteSwitch = digitalRead(REMOTE_PIN); //read auto steer enable switch open = 0n closed = Off
    switchByte = 0;
    switchByte |= (remoteSwitch << 2); //put remote in bit 2
    switchByte |= (steerSwitch << 1);   //put steerswitch status in bit 1 position
    switchByte |= workSwitch;

    WAS_Signal = analogRead(WAS_Raw);  // read the input pin // reads anolog input A5 0-5v is 0-1023    
    steerAngleActual = WAS_Signal  * (180.0 / 1023.0) - 90;        //convertes the raw signal to degrees
    steerAngleActual = steerAngleActual * -1;
    if (steerAngleActual < 0)
    {
      steerAngleActual = steerAngleActual * 1.022727272727273;
    }
    else
    {
      steerAngleActual = steerAngleActual * 1.875;
    }
    /*
    steeringPosition = (steeringPosition - steeringPositionZero - (XeRoll * Kd/10 ) );   //read the steering position sensor
    if (SteeringRightIsNotPositive) steeringPosition *= -1.0;

    
    //close enough to center, remove any integral correction
    if (distanceFromLine <= 40 && distanceFromLine >= -40) corr = 0;
    else
    {
      //use the integal value to adjust how much per cycle it increases
      corr +=Ki;

      //provide a limit - the old max integral value
      if (corr > maxIntegralValue) corr = maxIntegralValue;

      //now add the correction to fool steering position
      if (distanceFromLine > 40) 
      {
        steerAngleSetPoint -= corr;
      }
      else
      {
        steerAngleSetPoint += corr;
      }
    }
    */
    
		//convert position to steer angle.
		//steerAngleActual = (steeringPosition) / steerSensorCounts;

    //normal autosteer all ready to go
		if (watchdogTimer < 10)
		{
			steerAngleError = steerAngleActual - steerAngleSetPoint;   //calculate the steering error
			calcSteeringPID();  //do the pid
			motorDrive();       //out to motors the pwm value		
		}
		else
		{
			//we've lost the comm to AgOpenGPS
			pwmDrive = 0; //turn off steering motor
			motorDrive(); //out to motors the pwm value
		}

		//Send to agopenGPS **** you must send 5 numbers ****
		Serial.print(steerAngleActual * 100); //The actual steering angle in degrees times 100
		Serial.print(",");

		// *******  steer angle setpoint
    Serial.print(steerAngleSetPoint * 100); //setpoint in degrees * 100
		Serial.print(",");

    //heading 
    Serial.print(rollDogs);
    Serial.print(",");

		//*******  if no roll is installed, send 9999
		//Serial.print(9999);
		Serial.print((int)roll); //roll in degrees * 16
		Serial.print(",");

    Serial.println(switchByte); //steering switch status
    
		Serial.flush();   // flush out buffer
	} //end of timed loop

  //****************************************************************************************
  //This runs continuously, outside of the timed loop, keeps checking UART for new data
  // header high/low, relay byte, speed byte, high distance, low distance, Steer high, steer low
	if (Serial.available() > 0 && !isDataFound && !isSettingFound) //find the header, 127H + 254L = 32766
	{
		int temp = Serial.read();
		header = tempHeader << 8 | temp;                //high,low bytes to make int
		tempHeader = temp;                              //save for next time
		if (header == 32766) isDataFound = true;        //Do we have a match?
		if (header == 32764) isSettingFound = true;     //Do we have a match?
	}

	//Data Header has been found, so the next 6 bytes are the data
	if (Serial.available() > 7 && isDataFound)
	{
		isDataFound = false;
		relay = Serial.read();          // read relay control from AgOpenGPS
		gpsSpeed = Serial.read() >> 2;  //actual speed times 4, single byte

		//distance from the guidance line in mm
		distanceFromLine = (float)(Serial.read() << 8 | Serial.read());   //high,low bytes

		//set point steer angle * 10 is sent
		steerAngleSetPoint = ((float)(Serial.read() << 8 | Serial.read()))*0.01; //high low bytes

		//auto Steer is off if 32020,Speed is too slow, motor pos or footswitch open
		if (distanceFromLine == 32020 | gpsSpeed < 1 | steerSwitch == 1)
		{
			watchdogTimer = 12;//turn off steering motor
		}
		else          //valid conditions to turn on autosteer
		{
			watchdogTimer = 0;  //reset watchdog
			serialResetTimer = 0; //if serial buffer is getting full, empty it
		}

    //uturn byte read in
    uTurn = Serial.read();
	}

	//Settings Header has been found, 8 bytes are the settings
	if (Serial.available() > 7 && isSettingFound)
	{
		isSettingFound = false;  //reset the flag

		//change the factors as required for your own PID values
	  Kp = (float)Serial.read() * 1.0;      // read Kp from AgOpenGPS
		Ki = (float)Serial.read() * 1.0;    // read Ki from AgOpenGPS
		Kd = (float)Serial.read() * 1.0;      // read Kd from AgOpenGPS
		Ko = (float)Serial.read() * 0.1;      // read Ko from AgOpenGPS
   
		steeringPositionZero =  1530 + Serial.read();  //read steering zero offset
    
    minPWMValue = Serial.read();                 //read the minimum amount of PWM for instant on
    
		maxIntegralValue = Serial.read()*0.1;   //
		steerSensorCounts = Serial.read();      //
	}
 if (watchdogTimer < 10)
 {
  if (steerAngleError <= 0)
  {
    if (steerAngleError <= -.3)
    {
    digitalWrite(5, HIGH);
    digitalWrite(9, LOW);
    }
    else
    {
    digitalWrite(5, HIGH);
    digitalWrite(9, HIGH);
    }
  }
  else
  {
    if (steerAngleError >= .3)
    {
     digitalWrite(5, LOW);
     digitalWrite(9, HIGH); 
    }
    else
    {
    digitalWrite(5, HIGH);
    digitalWrite(9, HIGH);
    }
  }
 }
 else
 {
  digitalWrite(5, HIGH);
  digitalWrite(9, HIGH);
 }
}
void setupMPU(){
  Wire.beginTransmission(0b1101000); //This is the I2C address of the MPU (b1101000/b1101001 for AC0 low/high datasheet sec. 9.2)
  Wire.write(0x6B); //Accessing the register 6B - Power Management (Sec. 4.28)
  Wire.write(0b00000000); //Setting SLEEP register to 0. (Required; see Note on p. 9)
  Wire.endTransmission();  
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1B); //Accessing the register 1B - Gyroscope Configuration (Sec. 4.4) 
  Wire.write(0x08); //Setting the gyro to full scale +/- 500deg./s 
  Wire.endTransmission(); 
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1C); //Accessing the register 1C - Acccelerometer Configuration (Sec. 4.5) 
  Wire.write(0x10); //Setting the accel to +/- 8g
  Wire.endTransmission(); 
  
  Wire.beginTransmission(0b1101000);                                      //Start communication with the address found during search
  Wire.write(0x1A);                                                          //We want to write to the CONFIG register (1A hex)
  Wire.write(0x03);                                                          //Set the register bits as 00000011 (Set Digital Low Pass Filter to ~43Hz)
  Wire.endTransmission();                                                    //End the transmission with the gyro    
}
void recordRegisters() {
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x3B); //Starting register for Accel Readings
  Wire.endTransmission();
  Wire.requestFrom(0b1101000,14); //Request Accel Registers (3B - 40)
  while(Wire.available() < 14);
  accelX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX
  accelY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
  accelZ = Wire.read()<<8|Wire.read(); //Store last two bytes into accelZ
  temperature=Wire.read()<<8|Wire.read();
  gyroX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX
  gyroY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
  gyroZ = Wire.read()<<8|Wire.read(); //Store last two bytes into accelZ

  if(cal_int == 2000)
  {
    gyroX -= gyro_x_cal;
    gyroY -= gyro_y_cal;
    gyroZ -= gyro_z_cal;
   
  }
}
